name: Demonstrate 360i Pipeline

on:
  workflow_dispatch:

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    env:
      ACCESS_TOKEN: ${{ secrets.THREESIXTYEYE_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Create config.ini with token
        run: |
          echo "[RawDataSource]" >> ./config/config.ini
          echo "gh_token = $ACCESS_TOKEN" >> ./config/config.ini
          echo "gh_user_name=alidootson" >> ./config/config.ini
          echo "gh_repo_name=UpdatedCDISCPilotData" >> ./config/config.ini
          echo "gh_repo_path=UpdatedCDISCPilotData/CDASH/datasetjson/" >> ./config/config.ini

          echo "" >> ./config/config.ini
          echo "[Study]" >> ./config/config.ini
          echo "study_oid=360i-lzzt" >> ./config/config.ini

          echo "" >> ./config/config.ini
          echo "[Data]" >> ./config/config.ini
          echo "data_path=./data" >> ./config/config.ini

          echo "" >> ./config/config.ini
          echo "[SourceSystem]" >> ./config/config.ini
          echo "name=360i" >> ./config/config.ini
          echo "version=0.0.1" >> ./config/config.ini

          echo "" >> ./config/config.ini
          echo "[LinkML]" >> ./config/config.ini
          echo "ndjson_linkml_yaml=./dsjvalidate/dataset-ndjson.yaml" >> ./config/config.ini
          
          echo "" >> ./config/config.ini
          echo "[Commands]" >> ./config/config.ini
          echo "python=python3" >> ./config/config.ini

      - name: Print config.ini (token masked)
        run: |
          echo "Contents of config.ini:"
          cat ./config/config.ini

      - name: Extract API URL from config.ini
        id: extract_config
        run: |
          USERNAME=$(grep '^gh_user_name' ./config/config.ini | cut -d '=' -f2 | xargs)
          REPONAME=$(grep '^gh_repo_name' ./config/config.ini | cut -d '=' -f2 | xargs)
          REPOPATH=$(grep '^gh_repo_path' ./config/config.ini | cut -d '=' -f2 | xargs)
          API_URL="https://api.github.com/repos/$USERNAME/$REPONAME/contents/$REPOPATH"
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      - name: Get list of JSON files from GitHub API
        run: |
          echo "Fetching file list from $API_URL"
          
          HTTP_STATUS=$(curl -sL -o api_response.json -w "%{http_code}" \
            -H "Authorization: token $ACCESS_TOKEN" "$API_URL")
      
          echo "GitHub API returned status: $HTTP_STATUS"
      
          echo "Extracting .json filenames..."
          jq -r '.[] | select(.type == "file" and has("name") and (.name | endswith(".json"))) | .name' api_response.json > filelist
      
          echo "Filelist:"
          cat filelist

      - name: Process Dataset-JSON files from filelist
        run: |
          SKIP_LIST="cm.json qs.json vs.json"
      
          while read file; do
            if echo "$SKIP_LIST" | grep -qw "$file"; then
              echo "Skipping $file (in skip list)"
              continue
            fi
      
            echo "Processing $file"

            # Step 1: Retrieve from GitHub
            INPUT_PATH=$(python github2dsj/github2dsj.py "$file" --path ./data)
            echo "Downloaded: $INPUT_PATH"
      
            # Step 2: Upversion
            NDJSON_PATH=$(python dsjupversion/dsjupversion.py -f "$INPUT_PATH")
            echo "Upversioned: $NDJSON_PATH"
      
            # Step 3: Validate
            echo "Validating $NDJSON_PATH"
            python dsjvalidate/dsjvalidate.py -f "$NDJSON_PATH"
            echo "Validation completed"
      
            echo "Done with $file"
            echo ""
          done < filelist

